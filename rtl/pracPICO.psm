                    ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
                    ;
                    ;
                    ;
                    ;
                    ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
                    ; one second intervals.
                    ;
                    ;
                    ;**************************************************************************************
                    ; Port definitions
                    ;**************************************************************************************
                    ;
                    ;
                    ;
                    CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
                    CONSTANT LED_0, 10
			        CONSTANT DATA_IN_PORT, 00	        ;input data port. this is an INPUT port.
                   
                    ;**************************************************************************************
                    ; Special Register usage
                    ;**************************************************************************************
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;**************************************************************************************
                    ; Scratch Pad Memory Locations
                    ;**************************************************************************************
                    ;
                    ;
                    CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
                    CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
                    CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
                    CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
                    ;
                    CONSTANT LED_pattern, 04            ;remember state of LEDs (8-bit counter in this case)
                    CONSTANT COUNTER, 05
                    CONSTANT ACCUM_LOW, 06
					CONSTANT ACCUM_HIGH, 07
					
                    ;
                    ;**************************************************************************************
                    ; Useful data constants
                    ;**************************************************************************************
                    ;
                    ;
                    ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                    ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                    ; calculation highly predictable. The '6' in the following equation even allows for
                    ; 'CALL delay_1us' instruction in the initiating code.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                    ; For clock rates below 10MHz the value of 1 must be used and the operation will
                    ; become lower than intended. Interrupts may effect the timing of software based
                    ; delays.
                    ;
                    CONSTANT delay_1us_constant, 05
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Initialise the system
                    ;**************************************************************************************
                    ;
        cold_start: LOAD s0, 00                         ;clear 1 second counter and clear LEDs
                    STORE s0, LED_pattern
                    OUTPUT s0, LED_port
                    LOAD sB, 00
                    ;
                    ENABLE INTERRUPT                    ;enable one second heart beat
                    ;
                    ;
                    ;**************************************************************************************
                    ; Main program
                    ;**************************************************************************************
                    ;
                    ; Display welcome message for design
                    ;
      main_program: CALL delay_1s
                    XOR sB, 01
                    AND sB, 01
                    OUTPUT sB, LED_0
                    CALL delay_1s
					JUMP main_program		            ;restart loop
                 
                    ;**************************************************************************************
                    ; Software delay routines
                    ;**************************************************************************************
                    ;
                    ; Delay of 1us.
                    ;
                    ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                    ; instruction executes in 2 clock cycles making the calculation highly predictable.
                    ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                    ; in the initiating code. Interrupts may effect software derived delays.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Registers used s0
                    ;
         delay_1us: LOAD s0, delay_1us_constant
          wait_1us: SUB s0, 01
                    JUMP NZ, wait_1us
                    RETURN
                    ;
                    ; Delay of 40us.
                    ;
                    ; Registers used s0, s1
                    ;
        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB s1, 01
                    JUMP NZ, wait_40us
                    RETURN
                    ;
                    ;
                    ; Delay of 1ms.
                    ;
                    ; Registers used s0, s1, s2
                    ;
         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB s2, 01
                    JUMP NZ, wait_1ms
                    RETURN
                    ;
                    ; Delay of 20ms.
                    ;
                    ; Delay of 20ms used during initialisation.
                    ;
                    ; Registers used s0, s1, s2, s3
                    ;
        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
         wait_20ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_20ms
                    RETURN
                    ;
                    ; Delay of approximately 1 second.
                    ;
                    ; Registers used s0, s1, s2, s3, s4
                    ;
          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB s4, 01
                    JUMP NZ, wait_1s
                    RETURN
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Service Routine (ISR)
                    ;**************************************************************************************
                    ;
                    ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
                    ; on the 8 LEDs.
                    ;
			   ISR: STORE s0, ISR_preserve_s0           ;preserve register
					STORE s1, ISR_preserve_s1           ;preserve register
					STORE s2, ISR_preserve_s2           ;preserve register
					STORE s3, ISR_preserve_s3           ;preserve register

					INPUT s0, DATA_IN_PORT	            ;read 8-bit sound sample

                    FETCH s1, ACCUM_LOW                 ;read low byte of the sum
					FETCH s2, ACCUM_HIGH			    ;read high byte of the sum
					FETCH s3, COUNTER				    ;read counter value
					COMPARE s0, 80 						;check if sample is negative
					JUMP NC, TAKE_ABS_VAL               ;jump and take absolute value if negative

               SUM: ADD s1, s0							;add new 8-bit sample to low byte
				    ADDCY s2, 00						;add carry to high byte
                    ADD s3, 01                          ;increment counter
				    JUMP C, LED_OUT					    ;jump if s3 gets a carry
                    STORE s1, ACCUM_LOW                 ;read low byte 
					STORE s2, ACCUM_HIGH				;read high byte
					STORE s3, COUNTER				    ;read counter value
					FETCH s0, ISR_preserve_s0           ;restore register
					FETCH s1, ISR_preserve_s1           ;restore register
					FETCH s2, ISR_preserve_s2           ;restore register
					FETCH s3, ISR_preserve_s3           ;restore register
                    RETURNI ENABLE
                    
      TAKE_ABS_VAL: XOR s0, FF					    	;bitwise NOT
			        ADD s0, 01						    ;add 1
					JUMP SUM						    ;Jump to sum
						
		   LED_OUT: COMPARE s2, 80				    	;if 128 <= s2 <= 256
					JUMP NC, ALL_LEDS_ON			    ;jump to turn on all LEDs

					COMPARE s2, 40                      ;if 64 <= s2 < 128
					JUMP NC, 7_LEDS_ON                  ;jump to turn on 7 LEDs

					COMPARE s2, 20                      ;if 32 <= s2 < 64
					JUMP NC, 6_LEDS_ON                  ;jump to turn on 6 LEDs

					COMPARE s2, 10                      ;if 16 <= s2 < 32
					JUMP NC, 5_LEDS_ON                  ;jump to turn on 5 LEDs

					COMPARE s2, 08                      ;if 8 <= s2 < 16
					JUMP NC, 4_LEDS_ON                  ;jump to turn on 4 LEDs

					COMPARE s2, 04                      ;if 4 <= s2 < 8
					JUMP NC, 3_LEDS_ON                  ;jump to turn on 3 LEDs

					COMPARE s2, 02                      ;if 2 <= s2 < 4
					JUMP NC, 2_LEDS_ON                  ;jump to turn on 2 LEDs

					COMPARE s2, 01                      ;if 1 <= s2 < 2
					JUMP NC, 1_LED_ON                   ;jump to turn on 1 LED

					JUMP C, NO_LED_ON                   ;if s2 = 0, jump to turn on 0 LED
					
	   ALL_LEDS_ON:	LOAD s0,FF					    	;8'b11111111 for all LEDs
					JUMP LED_FINISHED			        
					
	     7_LEDS_ON:	LOAD s0,FE                          ;8'b11111110 for 7 LEDs
					JUMP LED_FINISHED
					
	     6_LEDS_ON:	LOAD s0,FC                          ;8'b11111100 for 6 LEDs
					JUMP LED_FINISHED
					
	     5_LEDS_ON:	LOAD s0,F8                          ;8'b11111000 for 5 LEDs              
					JUMP LED_FINISHED
					
	     4_LEDS_ON:	LOAD s0,F0                          ;8'b11110000 for 4 LEDs
					JUMP LED_FINISHED
				
		 3_LEDS_ON:	LOAD s0,E0                          ;8'b11100000 for 3 LEDs
					JUMP LED_FINISHED
					
		 2_LEDS_ON:	LOAD s0,C0                          ;8'b11000000 for 2 LEDs
					JUMP LED_FINISHED
					
		 1_LED_ON:	LOAD s0,80                          ;8'b10000000 for 1 LED
					JUMP LED_FINISHED

	     NO_LED_ON:	LOAD s0,00                          ;8'b00000000 for no LED
					JUMP LED_FINISHED
        
      LED_FINISHED: OUTPUT s0, LED_port
                    LOAD s1, 00						  
		        	LOAD s2, 00						    
					LOAD s3, 00						    
					STORE s1, ACCUM_LOW                 ;read low byte 
					STORE s2, ACCUM_HIGH				;read high byte
					STORE s3, COUNTER				    ;read counter value
					FETCH s0, ISR_preserve_s0           ;restore register
					FETCH s1, ISR_preserve_s1           ;restore register
					FETCH s2, ISR_preserve_s2           ;restore register
					FETCH s3, ISR_preserve_s3           ;restore register
                    RETURNI ENABLE

                    ;**************************************************************************************
                    ; Interrupt Vector
                    ;**************************************************************************************
                    ;
                    ADDRESS 3FF
                    JUMP ISR
                    ;
                    ;